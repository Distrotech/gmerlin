AC_INIT
AC_CONFIG_SRCDIR([include/avdec.h])

AM_CONFIG_HEADER(include/config.h)
AM_INIT_AUTOMAKE(gmerlin_avdec, 0.1.0)

AC_DISABLE_STATIC
AM_PROG_AS_MOD
AC_PROG_LIBTOOL

dnl
dnl Check for Libraries
dnl

PKG_CHECK_MODULES(GAVL, gavl >= 0.2.0, , AC_MSG_ERROR("gavl not found"))
PKG_CHECK_MODULES(GMERLIN, gmerlin >= 0.3.0, , AC_MSG_ERROR("gmerlin not found"))

GMERLIN_LIB_DIR=`pkg-config --variable=prefix gmerlin`"/lib/gmerlin"
GMERLIN_PLUGIN_DIR=$GMERLIN_LIB_DIR"/plugins"
 
AC_SUBST(GMERLIN_PLUGIN_DIR)
AC_SUBST(GMERLIN_LIB_DIR)



dnl
dnl Optional Libraries
dnl

dnl
dnl AVCodec
dnl

have_avcodec="true"
AVCODEC_CFLAGS=
AVCODEC_LIBS=

AH_TEMPLATE([HAVE_LIBAVCODEC], [ libavcodec present ])

AC_CHECK_LIB(avcodec, avcodec_open, , have_avcodec="false")
AM_CONDITIONAL(HAVE_LIBAVCODEC, test "x$have_avcodec" = "xtrue")
if test "x$have_avcodec" = "xtrue"; then
AVCODEC_LIBS=$LIBS
LIBS=
fi

dnl
dnl Vorbis
dnl 

have_vorbis=false
AH_TEMPLATE([HAVE_VORBIS], [Vorbis libraries are there])
 
XIPH_PATH_VORBIS(have_vorbis=true)
AM_CONDITIONAL(HAVE_VORBIS, test x$have_vorbis = xtrue)
 
if test x$have_vorbis = xtrue; then
AC_DEFINE(HAVE_VORBIS)
fi

dnl
dnl libmpeg2
dnl 

have_libmpeg2=false
AH_TEMPLATE([HAVE_LIBMPEG2], [libmpeg2 found])

PKG_CHECK_MODULES(LIBMPEG2, libmpeg2 >= 0.4.0, have_libmpeg2=true, )

AM_CONDITIONAL(HAVE_LIBMPEG2, test x$have_libmpeg2 = xtrue)

if test x$have_libmpeg2 = xtrue; then
AC_DEFINE(HAVE_LIBMPEG2)
fi

dnl
dnl PNG
dnl 

AH_TEMPLATE([HAVE_LIBPNG], [Enable png codec])
 
have_libpng=false
 
OLD_CFLAGS=$CFLAGS
OLD_LIBS=$LIBS
 
LIBS="-lpng -lm -lz"
CFLAGS=""
 
AC_MSG_CHECKING(for libpng)
AC_TRY_LINK([#include <png.h>],
            [png_structp png_ptr;
             png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING,
                                               (png_voidp)0,
                                                NULL, NULL);],
            [have_libpng=true])
 
case $have_libpng in
  true) AC_DEFINE(HAVE_LIBPNG)
        AC_MSG_RESULT(yes)
        PNG_LIBS=$LIBS ;
        PNG_CFLAGS=$CFLAGS ;;
  false) AC_MSG_RESULT(no); PNG_LIBS=""; PNG_CFLAGS="";;
esac
CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

AC_SUBST(PNG_CFLAGS)
AC_SUBST(PNG_LIBS)
AM_CONDITIONAL(HAVE_LIBPNG, test x$have_libpng = xtrue)

if test x$have_libpng = xtrue; then
AC_DEFINE(HAVE_LIBPNG)
fi


dnl
dnl FAAD2
dnl

OLD_CFLAGS=$CFLAGS
OLD_LIBS=$LIBS
 
LIBS="-lfaad -lm"
CFLAGS=""

AH_TEMPLATE([HAVE_FAAD2], [Enable FAAD2])
AC_MSG_CHECKING(for faad2)
have_faad2="false"

  AC_TRY_RUN([
    #include "faad.h"
    #include <stdio.h>
    main()
    {
    int faad_major;
    int faad_minor;
    faacDecHandle dec;

    if(sscanf(FAAD2_VERSION, "%d.%d", &faad_major, &faad_minor) < 2)
      return -1;
    dec = faacDecOpen();
    if(!dec)
      return -1;
    return 0;
    }
  ],
  [
    # program could be run
    have_faad2="true"
    AC_MSG_RESULT(yes)
    FAAD2_CFLAGS=$CFLAGS
    FAAD2_LIBS=$LIBS

  ],
    # program could not be run
    AC_MSG_RESULT(no)
)

CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

AC_SUBST(FAAD2_CFLAGS)
AC_SUBST(FAAD2_LIBS)

AM_CONDITIONAL(HAVE_FAAD2, test x$have_faad2 = xtrue)

if test x$have_faad2 = xtrue; then
AC_DEFINE(HAVE_FAAD2)
fi


dnl
dnl MAD
dnl

OLD_CFLAGS=$CFLAGS
OLD_LIBS=$LIBS
 
LIBS="-lmad"
CFLAGS=""

AH_TEMPLATE([HAVE_MAD], [Enable MAD])
AC_MSG_CHECKING(for libmad 0.15.x)
have_mad="false"

  AC_TRY_RUN([
    #include "mad.h"
    #include <stdio.h>
    main()
    {
    struct mad_stream stream;
    int version_major = MAD_VERSION_MAJOR;
    int version_minor = MAD_VERSION_MINOR;
    if((version_major != 0) || (version_minor != 15))
      return -1;
    mad_stream_init(&stream);
    return 0;
    }
  ],
  [
    # program could be run
    have_mad="true"
    AC_MSG_RESULT(yes)
    MAD_CFLAGS=$CFLAGS
    MAD_LIBS=$LIBS

  ],
    # program could not be run
    AC_MSG_RESULT(no)
)

CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

AC_SUBST(MAD_CFLAGS)
AC_SUBST(MAD_LIBS)

AM_CONDITIONAL(HAVE_MAD, test x$have_mad = xtrue)

if test x$have_mad = xtrue; then
AC_DEFINE(HAVE_MAD)
fi

dnl
dnl liba52
dnl

OLD_CFLAGS=$CFLAGS
OLD_LIBS=$LIBS
 
LIBS="-la52"
CFLAGS=""

AH_TEMPLATE([HAVE_LIBA52], [Enable liba52])
AC_MSG_CHECKING(for liba52)
have_liba52="false"

  AC_TRY_RUN([
    #include <inttypes.h>
    #include <a52dec/a52.h>
    main()
    {
    a52_state_t * state = a52_init(0);
    return 0;
    }
  ],
  [
    # program could be run
    have_liba52="true"
    AC_MSG_RESULT(yes)
    LIBA52_CFLAGS=$CFLAGS
    LIBA52_LIBS=$LIBS

  ],
    # program could not be run
    AC_MSG_RESULT(no)
)

CFLAGS=$OLD_CFLAGS
LIBS=$OLD_LIBS

AC_SUBST(LIBA52_CFLAGS)
AC_SUBST(LIBA52_LIBS)

AM_CONDITIONAL(HAVE_LIBA52, test x$have_mad = xtrue)

if test x$have_liba52 = xtrue; then
AC_DEFINE(HAVE_LIBA52)
fi

dnl
dnl libxml2
dnl

dnl have_libxml2="false"
dnl PKG_CHECK_MODULES(XML2, libxml-2.0 >= 2.4.0, have_libxml2="true", have_libxml2="false")
dnl AM_CONDITIONAL(HAVE_LIBXML2, test x$have_libxml2 = xtrue)

dnl
dnl Check wether to enable win32 DLLs
dnl We compile them, if we have an intel architecture and
dnl gcc. Other libs make a more complicated check here.
dnl

enable_w32dll="false"

if test x"$GCC" = x"yes"; then
 case "$host_cpu" in
    i?86 | k?-* | athlon | pentium) enable_w32dll="true"
 esac
fi

AH_TEMPLATE([HAVE_W32DLL], [ Win32 dll loader enabled ])

if test "x$enable_w32dll" = "xtrue"; then
AC_DEFINE([HAVE_W32DLL])
fi

AM_CONDITIONAL(HAVE_W32DLL, test x"$enable_w32dll" = "xtrue")

W32_NO_OPTIMIZE=""
AC_SUBST(W32_NO_OPTIMIZE)

dnl
dnl For win32 libraries location, needed by libw32dll.
dnl
                                                                                          
AC_ARG_WITH(w32-path,[  --with-w32-path=path    Location of WIN32 libraries],
            w32_path="$withval", w32_path="/usr/lib/win32")
AC_SUBST(w32_path)

AC_CHECK_HEADERS(sys/mman.h)


dnl
dnl Common CFLAGS
dnl

CFLAGS="-Wall -D_REENTRANT -D_FILE_OFFSET_BITS=64 $GAVL_CFLAGS"

dnl
dnl Build optimization flags
dnl

OPT_CFLAGS=""
TRY_CFLAGS=""

CPU_PENTIUM=false

if test x"$GCC" = x"yes"; then
  CFLAGS="-Wall -finline-functions $CFLAGS"
  TRY_CFLAGS="-O3"
  AC_TRY_CFLAGS([$TRY_CFLAGS],[OPT_CFLAGS=$TRY_CFLAGS])
  dnl -fomit-frame-pointer
  TRY_CFLAGS="$OPT_CFLAGS -fomit-frame-pointer -funroll-all-loops -falign-functions=2 -falign-loops=2 -falign-jumps=2"
  AC_TRY_CFLAGS([$TRY_CFLAGS],[OPT_CFLAGS=$TRY_CFLAGS])
  dnl arch-specific flags
  case "$host_cpu" in
    i386)           TRY_CFLAGS="$OPT_CFLAGS -mcpu=i386";;
    i486)           TRY_CFLAGS="$OPT_CFLAGS -mcpu=i486";;
    i586)           TRY_CFLAGS="$OPT_CFLAGS -mcpu=pentium"; CPU_PENTIUM=true ;;
    i686)           TRY_CFLAGS="$OPT_CFLAGS -mcpu=pentiumpro"; CPU_PENTIUM=true
;;
    k6)             TRY_CFLAGS="$OPT_CFLAGS -mcpu=k6"; CPU_PENTIUM=true ;;
    sparc)          TRY_CFLAGS="$OPT_CFLAGS -mcpu=ultrasparc -mvis";;
  esac
AC_TRY_CFLAGS([$TRY_CFLAGS],[OPT_CFLAGS=$TRY_CFLAGS])
fi

dnl
dnl Now, build the final CFLAGS.
dnl
have_debug=false

AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[Enable debugging (disable optimization)]),
[case "${enableval}" in
   yes) have_debug=true ;;
   no)  have_debug=false ;;
esac],have_debug=false)

case $have_debug in
  true) CFLAGS="-g $CFLAGS";;
  false) CFLAGS="$CFLAGS $OPT_CFLAGS";;
esac

LIBS="$GAVL_LIBS $AVCODEC_LIBS"

if test "x$prefix" = xNONE; then
   prefix="${ac_default_prefix}"
fi
if test "x$exec_prefix" = xNONE; then
   exec_prefix="${prefix}"
fi


LIBS='$(top_srcdir)/lib/libgmerlin_avdec.la -lm'

AC_CONFIG_FILES([Makefile \
include/Makefile \
lib/Makefile \
lib/libw32dll/Makefile \
lib/libw32dll/dmo/Makefile \
lib/libw32dll/qtx/Makefile \
lib/libw32dll/qtx/qtxsdk/Makefile \
lib/libw32dll/wine/Makefile \
lib/libw32dll/DirectShow/Makefile \
lib/real_rtsp/Makefile \
plugins/Makefile \
tests/Makefile ])

AC_OUTPUT

echo "Configuration: "

echo -n "AVCodec:           "
if test "x$have_avcodec" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "faad2:             "
if test "x$have_faad2" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "vorbis:            "
if test "x$have_vorbis" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "libpng:            "
if test "x$have_libpng" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "libmpeg2:          "
if test "x$have_libmpeg2" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "libmad 0.15.x:     "
if test "x$have_mad" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "liba52:            "
if test "x$have_liba52" = "xtrue"; then
echo "Yes"
else
echo "Missing"
fi

echo -n "win32 DLL Support: "
if test "x$enable_w32dll" = "xtrue"; then
echo "Enabled"
else
echo "Disabled (Unsupported Architecture)"
fi
